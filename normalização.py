# -*- coding: utf-8 -*-
"""normalização

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15wAtEcWy-8P2bKDgtBWOpEUwuWYYye2E
"""

import pandas as pd
from sklearn.preprocessing import MinMaxScaler
import chardet

def detectar_encoding(arquivo):
    with open(arquivo, 'rb') as f:
        result = chardet.detect(f.read())
    return result['encoding']

def carregar_dados(arquivo):
    encoding = detectar_encoding(arquivo)
    try:
        df = pd.read_csv(arquivo, encoding=encoding)
        print("Arquivo carregado com sucesso!")
        return df
    except Exception as e:
        print(f"Erro ao carregar arquivo: {e}")
        return None

def normalizar_dados(df):

    colunas_numericas = df.select_dtypes(include=['int64', 'float64']).columns.tolist()

    if not colunas_numericas:
        print("Nenhuma coluna numérica encontrada para normalização!")
        return None

    print(f"\nColunas numéricas identificadas: {colunas_numericas}")

    df_normalizado = df.copy()

    scaler = MinMaxScaler()
    df_normalizado[colunas_numericas] = scaler.fit_transform(df[colunas_numericas])

    print("\nEstatísticas após normalização:")
    print(df_normalizado[colunas_numericas].describe().round(2))

    return df_normalizado

def salvar_dados(df, nome_arquivo):
    try:
        df.to_csv(nome_arquivo, index=False)
        print(f"\n Dados normalizados salvos com sucesso em '{nome_arquivo}'")
    except Exception as e:
        print(f"Erro ao salvar arquivo: {e}")

def main():

    arquivo_entrada = 'taxa_de_desistencia.csv'
    arquivo_saida = 'dados_normalizados.csv'

    print("Iniciando processo de normalização Min-Max")


    df = carregar_dados(arquivo_entrada)
    if df is None:
        return

    print("\n Amostra dos dados originais:")
    print(df.head(3))


    df_normalizado = normalizar_dados(df)
    if df_normalizado is None:
        return

    print("\n Amostra dos dados normalizados:")
    print(df_normalizado.head(3))

    salvar_dados(df_normalizado, arquivo_saida)

if __name__ == "__main__":
    main()